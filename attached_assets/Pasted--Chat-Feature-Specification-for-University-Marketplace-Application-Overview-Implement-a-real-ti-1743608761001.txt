# Chat Feature Specification for University Marketplace Application

## Overview
Implement a real-time chat system allowing users to communicate about listings, negotiate prices, and coordinate exchanges. The system should be secure, efficient, and provide a smooth user experience.

## Technical Requirements

### Database Schema

```sql
-- Messages Table
CREATE TABLE messages (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
  sender_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  has_attachment BOOLEAN DEFAULT FALSE,
  attachment_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  read_at TIMESTAMP WITH TIME ZONE
);

-- Conversations Table
CREATE TABLE conversations (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  listing_id UUID REFERENCES listings(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Conversation Participants Table
CREATE TABLE conversation_participants (
  conversation_id UUID REFERENCES conversations(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  last_read_at TIMESTAMP WITH TIME ZONE,
  PRIMARY KEY (conversation_id, user_id)
);
```

### Row-Level Security Policies

```sql
-- Conversations RLS
CREATE POLICY "Users can view their own conversations" 
  ON conversations 
  FOR SELECT 
  USING (
    id IN (
      SELECT conversation_id FROM conversation_participants 
      WHERE user_id = auth.uid()
    )
  );

-- Messages RLS
CREATE POLICY "Users can view messages in their conversations" 
  ON messages 
  FOR SELECT 
  USING (
    conversation_id IN (
      SELECT conversation_id FROM conversation_participants 
      WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert messages in their conversations" 
  ON messages 
  FOR INSERT 
  WITH CHECK (
    sender_id = auth.uid() AND
    conversation_id IN (
      SELECT conversation_id FROM conversation_participants 
      WHERE user_id = auth.uid()
    )
  );
```

## API Endpoints

### Conversation Management
1. **Create Conversation**
   - `POST /api/conversations`
   - Required parameters: `listing_id`, `participant_id` (the other user)
   - Returns: Conversation object with ID

2. **List Conversations**
   - `GET /api/conversations`
   - Optional parameters: `limit`, `offset`
   - Returns: Array of conversation objects with preview of last message

3. **Get Conversation**
   - `GET /api/conversations/:id`
   - Returns: Conversation details with participants information

### Messaging
1. **Send Message**
   - `POST /api/conversations/:id/messages`
   - Required parameters: `content`
   - Optional parameters: `attachment` (file upload)
   - Returns: Created message object

2. **List Messages**
   - `GET /api/conversations/:id/messages`
   - Optional parameters: `limit`, `offset`, `before_id` (pagination)
   - Returns: Array of message objects

3. **Mark as Read**
   - `POST /api/conversations/:id/read`
   - Updates the last_read_at timestamp for the user

### Real-time Features
1. **Message Subscription**
   - WebSocket connection subscribing to new messages
   - Channel: `conversation:{conversation_id}`
   - Events: `message.new`, `message.read`

2. **Typing Indicator**
   - WebSocket event: `typing.{conversation_id}`
   - Parameters: `user_id`, `is_typing` (boolean)

## UI Components

### Conversations List
- Display list of all conversations
- Show participant name/avatar
- Preview of last message
- Timestamp of last message
- Unread message indicator
- Sorted by most recent activity

### Conversation Detail
- Message thread with clear sender indicators
- Timestamps for each message
- Read receipts
- Image attachments with previews
- Typing indicators
- Input area with attachment support
- Clear link to the related listing

### Notifications
- In-app notifications for new messages
- Badge counters for unread messages
- Option to enable push notifications for mobile

## Image/File Handling
- Store attachments in Supabase Storage
- Support image previews directly in messages
- Limit file types to images only (PNG, JPEG, GIF)
- Maximum file size: 5MB

## Performance Considerations
- Paginate messages (20 per page)
- Implement efficient loading of message history
- Cache recent conversations
- Optimize image loading and previews

## Security Measures
- Sanitize all message content
- Validate file uploads
- Ensure strict row-level security
- Prevent accessing conversations user is not part of

## Implementation Approach with Supabase

### 1. Real-time Setup
```javascript
// Subscribe to new messages in a conversation
const messageSubscription = supabase
  .channel(`conversation:${conversationId}`)
  .on('postgres_changes', 
    { 
      event: 'INSERT', 
      schema: 'public', 
      table: 'messages',
      filter: `conversation_id=eq.${conversationId}`
    },
    (payload) => {
      // Add new message to UI
      appendMessage(payload.new);
    }
  )
  .subscribe();
```

### 2. Sending Messages
```javascript
async function sendMessage(conversationId, content, file = null) {
  let attachmentUrl = null;
  
  // If there's a file attachment, upload it first
  if (file) {
    const { data, error } = await supabase.storage
      .from('message-attachments')
      .upload(`${conversationId}/${Date.now()}-${file.name}`, file);
      
    if (error) throw error;
    attachmentUrl = supabase.storage.from('message-attachments').getPublicUrl(data.path).publicURL;
  }
  
  // Insert message record
  const { data, error } = await supabase
    .from('messages')
    .insert({
      conversation_id: conversationId,
      sender_id: currentUser.id,
      content,
      has_attachment: !!attachmentUrl,
      attachment_url: attachmentUrl
    });
    
  if (error) throw error;
  return data;
}
```

## Testing Requirements
1. Test message delivery in real-time
2. Verify read receipts functionality
3. Test pagination of message history
4. Verify proper access control (users can't access others' conversations)
5. Test image upload and display
6. Verify typing indicators
7. Test offline behavior and message queuing

## Metrics to Track
- Average response time in conversations
- Message volume per user
- Conversation completion rate (leading to successful transactions)
- Average conversation length
- Active conversations per listing